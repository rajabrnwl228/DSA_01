class DisjointSet
{
    vector<int> size;
    vector<int> rank;

    vector<int> parent;

public:
    DisjointSet(int n)
    {
        size.resize(n + 1, 1);
        size.resize(n + 1, 0);
        parent.resize(n + 1);
        for (int i = 0; i < n; i++)
        {
            parent[i] = i;
        }
    }
    int findPar(int node)
    {
        if (node == parent[node])
            return node;
        return parent[node] = findPar(parent[node]);
    }
    void unionByRank(int u, int v)
    {
        int ulp_u = findPar(u);
        int ulp_v = findPar(v);
        if (ulp_u == ulp_v)
            return;
        if (rank[ulp_u] < rank[ulp_v])
        {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_u] > rank[ulp_v])
        {
            parent[ulp_v] = ulp_u;
        }
        else
        {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
    void unionBySize(int u, int v)
    {
        int ulp_u = findPar(u);
        int ulp_v = findPar(v);
        if (ulp_u == ulp_v)
            return;
        if (size[ulp_u] < size[ulp_v])
        {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else
        {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators)
{
    // code here
    vector<vector<int>> vis(n, vector<int>(m, 0));
    DisjointSet ds(n * m);
    int cnt = 0;
    vector<int> ans;
    for (auto it : operators)
    {
        int r = it[0];
        int c = it[1];
        if (vis[r][c] == 1)
        {
            ans.push_back(cnt);
            continue;
        }
        vis[r][c] = 1;
        cnt++;
        int dr[] = {-1, 0, 1, 0};
        int dc[] = {0, 1, 0, -1};
        for (int i = 0; i < 4; i++)
        {
            int nr = r + dr[i];
            int nc = c + dc[i];
            if (nr >= 0 && nr < n && nc >= 0 && nc < m && vis[nr][nc] == 1)
            {
                int node = r * m + c;
                int adjnode = nr * m + nc;
                if (ds.findPar(node) != ds.findPar(adjnode))
                {
                    cnt--;
                    ds.unionBySize(node, adjnode);
                }
            }
        }
        ans.push_back(cnt);
    }
    return ans;
}